<html><!-- 1st Draft Written by Cynthia Rempel, 2nd Draft Agreed Upon Unamiously by Team One --><head> <title> Agile Software Process Proposal -- CS 383 </title><style type="text/css">h2 {    	font-family: "Times New Roman", Times, serif;        font-size: 16px;        font-weight: bold;        font-style: normal;        font-variant: normal;        text-transform: none;        color: #008080;        padding-bottom: -9px;}p {   	white-space: normal;        text-indent: 50px;        width: 750px;        line-height: normal;}h1 {    	font-family: "Times New Roman", Times, serif;        font-size: 20px;        color: #0066FF;        font-weight: bold;        font-style: italic;        text-align: center;}h4 {    	text-indent: 30px;        font-size: 16px;        font-weight: bold;        color: #0000FF;}h3 {    	font-family: "Times New Roman", Times, serif;        font-size: 15px;        font-weight: bold;        color: #000080;        text-indent: 10px;}body {      	background-color: #DFFFFF;        padding-bottom: 9px;}.center {	text-align: center;}</style></head><body><h1>Blended Feature / Test Driven Development</h1><p> Team One will use a blended feature-driven-development and    test-driven-development model as a way for our group to work together to    design Groups in a University Setting (GUS).</p><h2> Rationale </h2><p> As our group has difficulty meeting and interacting in a timely manner    between classes, an agile model that requires the least interaction is the    most appropriate.  Features can be implemented through test-driven    development by writing tests for feature functionality.  Test driven    development requires little interaction: a developer adds a test, the    developer then sees if the test succeeds on existing code, another    developer writes code, runs it against existing tests, refactors the code,    the code gets reviewed and the process repeats.  The roles in this process    can be quickly divvied among members (within 5 minutes), the team can then    ^�tag-team^� their part(s) through the use of intermediate deadlines, the    stages can be monitored by all members through email, enforced by the    leader, and the only interaction needed outside of class is emailing team    members with the intermediate products of their work.  This method meets    the need to minimize any communication between classes.</p><h2> Method </h2><h3> Stage 0: </h3><p> DURING CLASS the team selects a feature (less than 1 minute) </p><h4>0.0</h4><p> Two team members (member a and member b) write a checklist (less than 1    minute) This test can be written to a desired feature</p><h4>0.1</h4><p> Two team members are identified to write feature code (member c and member    d)  They divvy up what parts they write (less than 1 minute)</p><h4>0.2</h4><p> Member a and member b divvy up what parts of the test they will write (less    than 1 minute)</p><h4>0.3</h4><p> The team leader decides on intermediate deadlines </p><p class="center">ALL THIS IS DONE BEFORE THE END OF CLASS </p><h3>Stage 1: </h3><p> Members a and b implement the test within the time allotted and then email    the whole team copies of their code.</p><h3>Stage 2: </h3><p> Members c and d implement their code within the time allotted and email it    to the whole team.</p><h3>Stage 3: </h3><p> The reviewer writes one good comment and one bad comment about each code    reviewed.</p><h3>Stage 4: </h3><p><i><b><u> (Every other cycle) </u></b></i>the new GUS implementation is ran    against three different potential users: a non-technical user, a    semi-technical user, and a technical user.</p><p> A non-technical user is on the level of only using email and a search    engine, this type of user would simulate what most users will be like, but    the feedback will most likely be very limited.</p><p> A semi-technical user is on the level of using applications proficiently ^    knows how to use advanced features of office software, can build basic    applications or websites using WYSIWYG GUIs, but doesn^�t code using IDEs or    terminals.  This type of user would provide easy-to-understand feedback.</p><p> A technical user is on the level of using IDEs or terminals, this type of    user simulates the software development team that will maintain GUS.</p><p> Each cycle happens within a two week period.</p><p> Although every member monitors the progress of the code, the leader will be    the one to hold the members accountable.</p><h2>Conclusions</h2><p> The feature and test-driven agile processing plan allows our team to keep    repeating improvement cycles to the end of the semester with minimal    communication requirements.  The time-line will allow for an    end-of-semester accolade meeting, outlining what we did right and what    could be improved.</p></body></html>


